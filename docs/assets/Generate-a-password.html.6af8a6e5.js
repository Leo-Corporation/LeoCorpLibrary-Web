import{_ as e,r as o,o as p,c as r,b as n,d as t,e as l,a as s}from"./app.3046e11b.js";const c={},i=s(`<h1 id="password" tabindex="-1"><a class="header-anchor" href="#password" aria-hidden="true">#</a> Password</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>To generate a password using LeoCorpLibrary, you must include this line of code in your &quot;using&quot; region:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">LeoCorpLibrary</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code><span class="token keyword">Imports</span> LeoCorpLibrary
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><h3 id="a-generate" tabindex="-1"><a class="header-anchor" href="#a-generate" aria-hidden="true">#</a> a. Generate</h3><p>To generate a password, you need to call the <code>Generate()</code> method, in:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>LeoCorpLibrary<span class="token punctuation">.</span>Password<span class="token punctuation">.</span><span class="token function">Generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It returns a <code>string</code> value. This method has two variations.</p><h4 id="generate-length-chars-separator" tabindex="-1"><a class="header-anchor" href="#generate-length-chars-separator" aria-hidden="true">#</a> Generate(length, chars, separator)</h4><p><strong>This method is available in version 1.4 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details><p>This method has a few parameters:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Argument</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">length</td><td style="text-align:center;">Length of the password</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">chars</td><td style="text-align:center;">Characters that are used to generate the password</td><td style="text-align:center;">&quot;a,b,c,d&quot;</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">separator</td><td style="text-align:center;">Separator</td><td style="text-align:center;">&quot;,&quot;</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Password<span class="token punctuation">.</span><span class="token function">Generate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>Password<span class="token punctuation">.</span>Generate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h4 id="generate-length-passwordpresets" tabindex="-1"><a class="header-anchor" href="#generate-length-passwordpresets" aria-hidden="true">#</a> Generate(length, passwordPresets)</h4><p><strong>This method is available in version 2.4 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details><p>This method has a few parameters:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Argument</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">length</td><td style="text-align:center;">Length of the password</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">PasswordPresets</td><td style="text-align:center;">passwordPresets</td><td style="text-align:center;">The preset used for the password generation</td><td style="text-align:center;">PasswordPresets.Simple</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Password<span class="token punctuation">.</span><span class="token function">Generate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> PasswordPresets<span class="token punctuation">.</span>Simple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>Password<span class="token punctuation">.</span>Generate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> PasswordPresets<span class="token punctuation">.</span>Simple<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h3 id="b-generateasync" tabindex="-1"><a class="header-anchor" href="#b-generateasync" aria-hidden="true">#</a> b. GenerateAsync</h3><p>To generate a password, you need to call the <code>GenerateAsync()</code> method, in:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>LeoCorpLibrary<span class="token punctuation">.</span>Password<span class="token punctuation">.</span><span class="token function">GenerateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It returns a <code>Task&lt;string&gt;</code> value. This method has two variations.</p><h4 id="generateasync-length-chars-separator" tabindex="-1"><a class="header-anchor" href="#generateasync-length-chars-separator" aria-hidden="true">#</a> GenerateAsync(length, chars, separator)</h4><p><strong>This method is available in version 2.4 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details><p>This method has a few parameters:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Parameter</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">length</td><td style="text-align:center;">Length of the password</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">chars</td><td style="text-align:center;">Characters that are used to generate the password</td><td style="text-align:center;">&quot;a,b,c,d&quot;</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">separator</td><td style="text-align:center;">Separator</td><td style="text-align:center;">&quot;,&quot;</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">await</span> Password<span class="token punctuation">.</span><span class="token function">GenerateAsync</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>Await Password<span class="token punctuation">.</span>GenerateAsync<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h4 id="generateasync-length-passwordpresets" tabindex="-1"><a class="header-anchor" href="#generateasync-length-passwordpresets" aria-hidden="true">#</a> GenerateAsync(length, passwordPresets)</h4><p><strong>This method is available in version 2.4 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details><p>This method has a few parameters:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Parameter</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">length</td><td style="text-align:center;">Length of the password</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">PasswordPresets</td><td style="text-align:center;">passwordPresets</td><td style="text-align:center;">The preset used for the password generation</td><td style="text-align:center;">PasswordPresets.Simple</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">await</span> Password<span class="token punctuation">.</span><span class="token function">GenerateAsync</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> PasswordPresets<span class="token punctuation">.</span>Simple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>Await Password<span class="token punctuation">.</span>GenerateAsync<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> PasswordPresets<span class="token punctuation">.</span>Simple<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h3 id="c-generateamount" tabindex="-1"><a class="header-anchor" href="#c-generateamount" aria-hidden="true">#</a> c. GenerateAmount</h3><p>To generate multiple passwords you need to call this method, in.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>LeoCorpLibrary<span class="token punctuation">.</span>Password<span class="token punctuation">.</span><span class="token function">GenerateAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It returns a <code>List&lt;string&gt;</code> value. This method has two variations.</p><h4 id="generateamount-amount-length-chars-separator" tabindex="-1"><a class="header-anchor" href="#generateamount-amount-length-chars-separator" aria-hidden="true">#</a> GenerateAmount(amount, length, chars, separator)</h4><p><strong>This method is available in version 3.7 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details><p>This method has a few parameters:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Argument</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">amount</td><td style="text-align:center;">Number of passwords to generate</td><td style="text-align:center;">20</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">length</td><td style="text-align:center;">Length of the password</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">chars</td><td style="text-align:center;">Characters that are used to generate the password</td><td style="text-align:center;">&quot;a,b,c,d&quot;</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">separator</td><td style="text-align:center;">Separator</td><td style="text-align:center;">&quot;,&quot;</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> passwords <span class="token operator">=</span> Password<span class="token punctuation">.</span><span class="token function">GenerateAmount</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> passwords<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// For each password</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>passwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print password in console</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code><span class="token keyword">Dim</span> passwords <span class="token keyword">As</span> List<span class="token punctuation">(</span><span class="token keyword">Of</span> <span class="token keyword">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> Password<span class="token punctuation">.</span>GenerateAmount<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">For</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">To</span> passwords<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">&#39; For each password</span>
    Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>passwords<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">&#39; Print password in console</span>
<span class="token keyword">Next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h4 id="generateamount-amount-length-passwordpresets" tabindex="-1"><a class="header-anchor" href="#generateamount-amount-length-passwordpresets" aria-hidden="true">#</a> GenerateAmount(amount, length, passwordPresets)</h4><p><strong>This method is available in version 3.7 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details><p>This method has a few parameters:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Argument</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">amount</td><td style="text-align:center;">Number of passwords to generate</td><td style="text-align:center;">20</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">length</td><td style="text-align:center;">Length of the password</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">PasswordPresets</td><td style="text-align:center;">passwordPresets</td><td style="text-align:center;">The preset used for the password generation</td><td style="text-align:center;">PasswordPresets.Simple</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> passwords <span class="token operator">=</span> Password<span class="token punctuation">.</span><span class="token function">GenerateAmount</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> PasswordPresets<span class="token punctuation">.</span>Complex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> passwords<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// For each password</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>passwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print password in console</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code><span class="token keyword">Dim</span> passwords <span class="token keyword">As</span> List<span class="token punctuation">(</span><span class="token keyword">Of</span> <span class="token keyword">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> Password<span class="token punctuation">.</span>GenerateAmount<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> PasswordPresets<span class="token punctuation">.</span>Complex<span class="token punctuation">)</span>

<span class="token keyword">For</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">To</span> passwords<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">&#39; For each password</span>
    Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>passwords<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">&#39; Print password in console</span>
<span class="token keyword">Next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h3 id="d-generateamountasync" tabindex="-1"><a class="header-anchor" href="#d-generateamountasync" aria-hidden="true">#</a> d. GenerateAmountAsync</h3><p>To generate multiple passwords asynchronously you need to call this method, in.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>LeoCorpLibrary<span class="token punctuation">.</span>Password<span class="token punctuation">.</span><span class="token function">GenerateAmountAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It returns a <code>Task&lt;List&lt;string&gt;&gt;</code> value. This method has two variations.</p><h4 id="generateamountasync-amount-length-chars-separator" tabindex="-1"><a class="header-anchor" href="#generateamountasync-amount-length-chars-separator" aria-hidden="true">#</a> GenerateAmountAsync(amount, length, chars, separator)</h4><p><strong>This method is available in version 3.7 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details><p>This method has a few parameters:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Parameter</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">amount</td><td style="text-align:center;">Number of passwords to generate</td><td style="text-align:center;">20</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">length</td><td style="text-align:center;">Length of the password</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">chars</td><td style="text-align:center;">Characters that are used to generate the password</td><td style="text-align:center;">&quot;a,b,c,d&quot;</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">separator</td><td style="text-align:center;">Separator</td><td style="text-align:center;">&quot;,&quot;</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> passwords <span class="token operator">=</span> <span class="token keyword">await</span> Password<span class="token punctuation">.</span><span class="token function">GenerateAmountAsync</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> passwords<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// For each password</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>passwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print password in console</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code><span class="token keyword">Dim</span> passwords <span class="token keyword">As</span> List<span class="token punctuation">(</span><span class="token keyword">Of</span> <span class="token keyword">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> Await Password<span class="token punctuation">.</span>GenerateAmountAsync<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;a,b,c,d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">For</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">To</span> passwords<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">&#39; For each password</span>
     Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>passwords<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">&#39; Print password in console</span>
<span class="token keyword">Next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h4 id="generateamountasync-amount-length-passwordpresets" tabindex="-1"><a class="header-anchor" href="#generateamountasync-amount-length-passwordpresets" aria-hidden="true">#</a> GenerateAmountAsync(amount, length, passwordPresets)</h4><p><strong>This method is available in version 3.7 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details><p>This method has a few parameters:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Parameter</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">amount</td><td style="text-align:center;">Number of passwords to generate</td><td style="text-align:center;">20</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">length</td><td style="text-align:center;">Length of the password</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">PasswordPresets</td><td style="text-align:center;">passwordPresets</td><td style="text-align:center;">The preset used for the password generation</td><td style="text-align:center;">PasswordPresets.Simple</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> passwords <span class="token operator">=</span> <span class="token keyword">await</span> Password<span class="token punctuation">.</span><span class="token function">GenerateAmountAsync</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> PasswordPresets<span class="token punctuation">.</span>Complex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> passwords<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// For each password</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>passwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print password in console</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code><span class="token keyword">Dim</span> passwords <span class="token keyword">As</span> List<span class="token punctuation">(</span><span class="token keyword">Of</span> <span class="token keyword">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> Await Password<span class="token punctuation">.</span>GenerateAmountAsync<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> PasswordPresets<span class="token punctuation">.</span>Complex<span class="token punctuation">)</span>

<span class="token keyword">For</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">To</span> passwords<span class="token punctuation">.</span>Count <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">&#39; For each password</span>
    Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">(</span>passwords<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">&#39; Print password in console</span>
<span class="token keyword">Next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h3 id="e-getpasswordstrength" tabindex="-1"><a class="header-anchor" href="#e-getpasswordstrength" aria-hidden="true">#</a> e. GetPasswordStrength</h3><p><strong>This method is available in version 3.8 and higher.</strong></p><details><summary>Compatibility</summary><table><thead><tr><th style="text-align:center;">Frameworks</th><th style="text-align:center;">LeoCorpLibrary</th><th style="text-align:center;">LeoCorpLibrary.Core</th></tr></thead><tbody><tr><td style="text-align:center;">.NET 6</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET 5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Core 3.1</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr><tr><td style="text-align:center;">.NET Framework 4.5</td><td style="text-align:center;">\u2714</td><td style="text-align:center;">\u2714</td></tr></tbody></table></details>`,115),d=n("code",null,"GetPasswordStrength()",-1),u={href:"https://github.com/Leo-Corporation/Passliss",target:"_blank",rel:"noopener noreferrer"},k=n("a",{href:"#a-passwordstrength"},[n("code",null,"PasswordStrength")],-1),g=s(`<p>It&#39;s in:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>LeoCorpLibrary<span class="token punctuation">.</span>Password<span class="token punctuation">.</span><span class="token function">GetPasswordStrength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It has one argument:</p><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Argument</th><th style="text-align:center;">Description</th><th style="text-align:center;">Example</th></tr></thead><tbody><tr><td style="text-align:center;">string</td><td style="text-align:center;">password</td><td style="text-align:center;">The password to test</td><td style="text-align:center;">&quot;Ftel_UGbn542&quot;</td></tr></tbody></table><p>Here&#39;s an example of usage:</p><p>C#</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> passwords <span class="token operator">=</span>
<span class="token punctuation">{</span>
	<span class="token string">&quot;Ifhi2ztbg1&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;pars132&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;Lo8_n0D&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;uifVyuiVVH_\xE7VIvc&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;gygYUI4&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
		
<span class="token class-name">List<span class="token punctuation">&lt;</span>PasswordStrength<span class="token punctuation">&gt;</span></span> forces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>PasswordStrength<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> passwords<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	forces<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Password<span class="token punctuation">.</span><span class="token function">GetPasswordStrength</span><span class="token punctuation">(</span>passwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 
forces&#39; content:
Medium
Low
Good
VeryGood
Medium
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VB</p><div class="language-vb ext-vb line-numbers-mode"><pre class="language-vb"><code><span class="token keyword">Dim</span> passwords <span class="token keyword">As</span> <span class="token keyword">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Ifhi2ztbg1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pars132&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lo8_n0D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uifVyuiVVH_\xE7VIvc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gygYUI4&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">Dim</span> forces <span class="token keyword">As</span> List<span class="token punctuation">(</span><span class="token keyword">Of</span> PasswordStrength<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">New</span> List<span class="token punctuation">(</span><span class="token keyword">Of</span> PasswordStrength<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">For</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">To</span> passwords<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span>
    forces<span class="token punctuation">.</span>Add<span class="token punctuation">(</span>Password<span class="token punctuation">.</span>GetPasswordStrength<span class="token punctuation">(</span>passwords<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">Next</span>
<span class="token comment">&#39; forces&#39; content:</span>
<span class="token comment">&#39; Medium</span>
<span class="token comment">&#39; Low</span>
<span class="token comment">&#39; Good</span>
<span class="token comment">&#39; VeryGood</span>
<span class="token comment">&#39; Medium</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="#password">Go to top</a></p><h2 id="enumerations" tabindex="-1"><a class="header-anchor" href="#enumerations" aria-hidden="true">#</a> Enumerations</h2><h3 id="a-passwordstrength" tabindex="-1"><a class="header-anchor" href="#a-passwordstrength" aria-hidden="true">#</a> a. PasswordStrength</h3><p><strong>This enumeration is available in version 3.8 and higher.</strong></p><p>The <code>PasswordStrength</code> enumeration can be equal to:</p><ul><li>Low</li><li>Medium</li><li>Good</li><li>VeryGood</li></ul><p><a href="#password">Go to top</a></p>`,16);function h(y,m){const a=o("ExternalLinkIcon");return p(),r("div",null,[i,n("p",null,[t("The "),d,t(" method allows you to evaluate a password's strength using "),n("a",u,[t("Passliss"),l(a)]),t("' standards. It returns a "),k,t(" enum.")]),g])}const v=e(c,[["render",h],["__file","Generate-a-password.html.vue"]]);export{v as default};
